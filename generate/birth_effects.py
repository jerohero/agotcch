import textwrap
from lookups import *

INDENT = '	'

def generate_birth_effects(characters: dict, fathers_to_children: dict, mothers_to_children: dict, dnas: list) -> str:
	birth_events = []
	chained_mothers = find_chained_parents(mothers_to_children)
	chained_fathers = find_chained_parents(fathers_to_children)

	prefix = textwrap.dedent(f"""
		# Canon Children Birth Effects
		# Generated by Canon Children tool (@yeru)
		# Do not edit this file directly, it will be overwritten
	""").lstrip()
	setup_cycles_event = create_setup_cycles_event(fathers_to_children).lstrip().replace('\n\n', '\n')
	base_birth_event = create_base_birth_event(characters, mothers_to_children).replace('\n\n', '\n')

	for child_id, child in characters.items():
		chained_child_fathers = get_chained_child_fathers(child, characters, mothers_to_children, fathers_to_children, chained_mothers, chained_fathers)

		should_create_twin_birth_event = False
		birth_event = ''

		if ("twin" in child["traits"]["inherited"]):
			twins = get_mother_twins(characters, mothers_to_children[child["mother"]])
			should_create_twin_birth_event = twins[0] != child_id
		
		if not should_create_twin_birth_event:
			birth_event = create_birth_event(child, chained_child_fathers, child_id in dnas)
		else:
			birth_event = create_twin_birth_event(child, chained_child_fathers, child_id in dnas)

		birth_events.append(birth_event)

	setup_cycles_event_file = f"{prefix}\nnamespace = agot_cc_events_cycles_setup\n\n{''.join(setup_cycles_event).strip()}"
	base_birth_event_file = f"{prefix}\nnamespace = agot_cc_events_births_base\n\n{''.join(base_birth_event).strip()}"
	# birth_events_files = []
	# num_divisions = 5
	# events_per_file = len(birth_events) // num_divisions
	# for i in range(num_divisions):
	# 	start_index = i * events_per_file
	# 	end_index = (i + 1) * events_per_file if i < num_divisions - 1 else len(birth_events)
	# 	birth_events_files.append(f"{prefix}\nnamespace= agot_cc_events_birth\n{''.join(birth_events[start_index:end_index]).strip()}")

	birth_events_file = f"{prefix}\nnamespace = agot_cc_events_births\n\n{''.join(birth_events).strip()}"

	return setup_cycles_event_file, base_birth_event_file, birth_events_file

def create_setup_cycles_event(fathers_to_children: list) -> str:
	setup_effects = [
		textwrap.dedent(f"""
			character:{father} ?= {{
				if = {{
					limit = {{ is_alive = yes }}
					create_story = {{ type = story_agot_cc_{father.lower()} }}
				}}
			}}
		""").rstrip() for father in fathers_to_children
	]

	return textwrap.dedent(f"""
		agot_cc_events_cycles_setup.0001 = {{
			hidden = yes
			immediate = {{
				if = {{
					limit = {{ agot_cc_setup_trigger = yes }}
					{textwrap.indent(''.join(setup_effects), INDENT * 5).rstrip()}
				}}
			}}
		}}
	""").rstrip()

def get_mother_twins(characters: dict, mother_to_children: dict) -> list:
	return [child for child in mother_to_children if "twin" in characters[child]["traits"]["inherited"]]

def create_base_birth_event(characters: dict, mothers_to_children: dict) -> str:
	steps = 5
	min_year = 8080
	max_year = 8305
	setup_effects = {year: [] for year in range(min_year, max_year, steps)}

	# character_groups = {}
	# for birth_year in range(8050, 8350, 50):
	# 	character_groups[birth_year] = [
	# 		character_id for character_id, character in characters.items()
	# 		if birth_year <= character["birth"] < birth_year + 50
	# 	]

	for i, mother in enumerate(mothers_to_children):
		# child_effects = []
		child_effects = {year: [] for year in range(min_year, max_year, steps)}

		twins = [child for child in mothers_to_children[mother] if "twin" in characters[child]["traits"]["inherited"]]
		twin_birth_effects = []
		# youngest = min([characters[child]["birth"] for child in mothers_to_children[mother]])
		# oldest = max([characters[child]["birth"] for child in mothers_to_children[mother]])

		for j, child_id in enumerate(mothers_to_children[mother]):
			child = characters[child_id]
			birth_year = (child["birth"] // steps) * steps

			if "twin" in child["traits"]["inherited"]:
				if twin_birth_effects:
					twin_birth_effects = [] # Will cause issues if there are multiple sets of twins, but it's a rare edge case so we'll just skip it for now
					continue
				twin_birth_effects = handle_twin_births(child, twins, characters)
			
			child_effects[birth_year].append(create_child_effect(child, twin_birth_effects))

		for birth_year in range(min(setup_effects.keys()), max(setup_effects.keys()) + 1, steps):
			is_first = len(setup_effects[birth_year]) <= 0
			if len(child_effects[birth_year]) <= 0:
				continue
			setup_effect = idk(is_first, mother, child_effects[birth_year])
			setup_effects[birth_year].append(setup_effect)
			# if youngest >= birth_year and oldest < birth_year + steps:
			# 	setup_effects[birth_year].append(setup_effect)
			# 	break
			# elif youngest < birth_year + steps and oldest >= birth_year:
			# 	setup_effects[birth_year].append(setup_effect)

	base_birth_events = [
		textwrap.dedent(f"""
			agot_cc_events_births_base.{year_group} = {{
				hidden = yes
				immediate = {{
					scope:child = {{ agot_cc_clear_genetic_traits_effect = yes }}
					{textwrap.indent(''.join(setup_effects[year_group]), INDENT * 5).rstrip()}
				}}
			}}
		""").rstrip() for year_group in setup_effects
	]

	return '\n'.join(base_birth_events)

def idk(is_first: bool, mother: str, child_effects) -> str:
	return textwrap.dedent(f"""
		{"if" if is_first else "else_if"} = {{
			limit = {{ scope:mother = {{ has_character_flag = is_{mother.lower()} }} }}
			{textwrap.indent(''.join(child_effects), INDENT * 3).rstrip()}
		}}
	""").rstrip()

def get_chained_child_fathers(child: dict, characters: dict, mothers_to_children: dict, fathers_to_children: dict, chained_mothers: list, chained_x: list) -> list:
	chained_child_fathers = []

	if child["is_female"] and child["id"] in chained_mothers:
		chained_child_fathers = get_child_fathers(child, characters, mothers_to_children)
	elif not child["is_female"] and child["id"] in chained_x:
		chained_child_fathers = get_child_fathers(child, characters, fathers_to_children)

	return chained_child_fathers

def get_child_fathers(child: dict, characters: dict, parents_to_children: dict):
	chained_child_fathers = []
	chained_child_ids = parents_to_children[child["id"]]

	for chained_child_id in chained_child_ids:
		chained_child = characters[chained_child_id]
		father = chained_child.get("father") or chained_child.get("real_father") # TODO: should it use real_father if father is not set?

		if father and father not in chained_child_fathers:
			chained_child_fathers.append(father)

	return chained_child_fathers

def create_birth_event(character: dict, chained_child_fathers: list, has_dna: bool) -> str:
	name_male = character["name"]["primary"] if not character['is_female'] else character["name"]["alt"]
	name_female = character["name"]["primary"] if character['is_female'] else character["name"]["alt"]

	return textwrap.dedent(f"""
		# {character["name"]["primary"]} - {character["id"]}
		agot_cc_events_births.{str(character["index"]).zfill(4)} = {{
			hidden = yes
			immediate = {{
				{"agot_cc_after_birth_effect" if has_dna else "agot_cc_after_birth_no_dna_effect"} = {{
					NAME_MALE = "{name_male or 'NULL'}"
					NAME_FEMALE = "{name_female or 'NULL'}"
					FLAG = is_{character["id"].lower()}{ f'''
					DNA = Dummy_{character["id"]}''' if has_dna else "" }
				}}
				{inject_data(character, chained_child_fathers)}
			}}
		}}
	""").rstrip()

def create_twin_birth_event(character: dict, chained_child_fathers: list, has_dna: bool) -> str:
	name_male = character["name"]["primary"] if not character['is_female'] else character["name"]["alt"]
	name_female = character["name"]["primary"] if character['is_female'] else character["name"]["alt"]

	return textwrap.dedent(f"""
		# {character["name"]["primary"]} - {character["id"]} (Twin)
		agot_cc_events_births.{str(character["index"]).zfill(4)} = {{
			hidden = yes
			immediate = {{
				create_character = {{
					name = "{character['name']['primary']}"
					age = 0
					father = {'scope:father' if character['father'] else 'scope:real_father'}
					mother = scope:mother
					gender = {'female' if character['is_female'] else 'male'}
					faith = {'scope:father' if character['father'] else 'scope:real_father'}.faith
					culture = {'scope:father' if character['father'] else 'scope:real_father'}.culture
					dynasty_house = {'scope:father' if character['father'] else 'scope:real_father'}.house
					location = scope:mother.location
					random_traits = no
					save_scope_as = child_2
				}}
				scope:child_2 = {{
					{"agot_cc_after_birth_effect" if has_dna else "agot_cc_after_birth_no_dna_effect"} = {{
						NAME_MALE = "{name_male or 'NULL'}"
						NAME_FEMALE = "{name_female or 'NULL'}"
						FLAG = is_{character["id"].lower()}{ f'''
						DNA = Dummy_{character["id"]}''' if has_dna else "" }
					}}
					{inject_data(character, chained_child_fathers, 6)}
				}}
			}}
		}}
	""").rstrip()

# def create_birth_effect(character: dict, chained_child_fathers: list, has_dna: bool) -> str:
# 	name_male = character["name"]["primary"] if not character['is_female'] else character["name"]["alt"]
# 	name_female = character["name"]["primary"] if character['is_female'] else character["name"]["alt"]

# 	return textwrap.dedent(f"""
# 		# {character["name"]["primary"]} - {character["id"]}
# 		agot_cc_{character["id"].lower()}_birth_effect = {{
# 			scope:child = {{
# 				{"agot_cc_after_birth_effect" if has_dna else "agot_cc_after_birth_no_dna_effect"} = {{
# 					NAME_MALE = "{name_male or 'NULL'}"
# 					NAME_FEMALE = "{name_female or 'NULL'}"
# 					FLAG = is_{character["id"].lower()}{ f'''
# 					DNA = Dummy_{character["id"]}''' if has_dna else "" }
# 				}}
# 			}}
# 			{inject_data(character, chained_child_fathers)}
# 		}}
# 	""").rstrip()

# def create_twin_birth_effect(character: dict, chained_child_fathers: list, has_dna: bool) -> str:
# 	name_male = character["name"]["primary"] if not character['is_female'] else character["name"]["alt"]
# 	name_female = character["name"]["primary"] if character['is_female'] else character["name"]["alt"]

# 	return textwrap.dedent(f"""
# 		# {character["name"]["primary"]} - {character["id"]} (Twin)
# 		agot_cc_{character["id"].lower()}_birth_effect = {{
# 			create_character = {{
# 				name = "{character['name']['primary']}"
# 				age = 0
# 				father = {'scope:father' if character['father'] else 'scope:real_father'}
# 				mother = scope:mother
# 				gender = {'female' if character['is_female'] else 'male'}
# 				faith = {'scope:father' if character['father'] else 'scope:real_father'}.faith
# 				culture = {'scope:father' if character['father'] else 'scope:real_father'}.culture
# 				dynasty_house = {'scope:father' if character['father'] else 'scope:real_father'}.house
# 				location = scope:mother.location
# 				random_traits = no
# 				save_scope_as = child_2
# 			}}
# 			hidden_effect = {{
# 				scope:child_2 = {{
# 					{"agot_cc_after_birth_effect" if has_dna else "agot_cc_after_birth_no_dna_effect"} = {{
# 						NAME_MALE = "{name_male or 'NULL'}"
# 						NAME_FEMALE = "{name_female or 'NULL'}"
# 						FLAG = is_{character["id"].lower()}{ f'''
# 						DNA = Dummy_{character["id"]}''' if has_dna else "" }
# 					}}
# 					{inject_data(character, chained_child_fathers, 5)}
# 				}}
# 			}}
# 		}}
# 	""").rstrip()

def inject_data(character: dict, chained_child_fathers: list, indent: int = 4) -> str:
	data_parts = [
		get_culture(character),
		get_location(character),
		get_flags(character),
		get_inactive_traits(character),
		# get_bastard_surname(character),
		get_nickname(character),
		get_sexuality(character),
		get_inherited_traits(character),
		get_canon_guardian(character),
		get_childhood_traits(character),
		get_canon_mother_setup(character, chained_child_fathers),
		get_canon_father_setup(character, chained_child_fathers)
	]
	return textwrap.indent('\n' + ''.join(data_parts), INDENT * indent).strip()

def handle_twin_births(child: dict, twins: list, characters: dict) -> list:
	twin_birth_effects = []
	child_twins = [twin for twin in twins if twin != child["id"] and characters[twin]["birth"] == child["birth"]]
	
	for twin in child_twins:
		# twin_birth_effects.append(f"\nagot_cc_{twin.lower()}_birth_effect = yes")
		twin_birth_effects.append(f"\ntrigger_event = agot_cc_events_births.{str(characters[twin]['index']).zfill(4)}")

	return twin_birth_effects

def create_child_effect(child: dict, twin_birth_effects: list) -> str:
	# agot_cc_{child['id'].lower()}_birth_effect = yes
	return textwrap.dedent(f"""
		if = {{
			limit = {{ agot_cc_check_pregnancy_child_trigger = {{ FLAG = is_{child['id'].lower()} }} }}
			{textwrap.indent(''.join(twin_birth_effects), INDENT * 3).rstrip()}
			trigger_event = agot_cc_events_births.{str(child["index"]).zfill(4)}
		}}
	""").rstrip()

def get_culture(character):
	if not character['father']:
		return f'set_culture_same_as = character:{character["real_father"]}\n'
	return f'set_culture_same_as = character:{character["father"]}\n'

def get_location(character):
	return f'set_location = scope:mother.location\n'

def get_flags(character):
	flags = ['add_character_flag = has_scripted_appearance']
	
	if character["flags"]:
		flags.extend(f'add_character_flag = {flag}' for flag in character["flags"])

	return '\n'.join(flags) + '\n'


def get_inactive_traits(character):
	traits = ['make_trait_inactive = scripted_appearance']
	
	if character["traits"]["inactive"]:
		traits.extend(f'make_trait_inactive = {trait}' for trait in character["traits"]["inactive"])

	return '\n'.join(traits) + '\n'

def get_bastard_surname(character):
	if character["bastard"]["surname"]:
		return f'agot_cc_give_bastard_nickname_effect = {{ NICKNAME = {character["bastard"]["surname"]} }}\n'
	return ''

def get_nickname(character):
	if character["nickname"]:
		return f'give_nickname = {character["nickname"]}\n'
	return ''


def get_sexuality(character):
	if character["sexuality"]:
		return f'set_sexuality = {character["sexuality"]}\n'
	return ''


def get_inherited_traits(character):
	if character["traits"]["inherited"]:
		return '\n'.join(f'add_trait = {trait}' for trait in character["traits"]["inherited"]) + '\n'
	return ''


def get_childhood_traits(character):
	output = []

	if character["traits"]["childhood"]:
		output.append(f'agot_cc_schedule_trait_effect = {{ TRAIT = flag:{character["traits"]["childhood"]} AGE = 3 }}')

	for i, trait in enumerate(character["traits"]["education"]):
		trait_years = [9, 11, 13, 14]
		output.append(f'agot_cc_schedule_trait_effect = {{ TRAIT = flag:{trait} AGE = {trait_years[i]} }}')

	return '\n'.join(output) + ('\n' if output else '')


def get_canon_guardian(character):
	# TODO: Implement guardian logic
	return ''


def get_canon_mother_setup(character, chained_child_fathers):
	if not character["is_female"]:
		return ''
	
	mother_setup = []

	for child_father in chained_child_fathers:
		setup = textwrap.dedent(f"""
			agot_cc_get_canon_child_scope_effect = {{ FLAG = is_{child_father.lower()} SCOPE = father_{child_father.lower()} }}
			if = {{
				limit = {{ scope:father_{child_father.lower()} ?= {{ is_alive = yes }} }}
				scope:father_{child_father.lower()} = {{
					agot_cc_setup_mother_effect = {{
						FATHER = scope:father_{child_father.lower()}
						MOTHER = scope:child
						MOTHER_FLAG = is_{character["id"].lower()}
						PREVENT_PREGNANCY = yes
					}}
				}}
			}}
		""").rstrip()
		mother_setup.append(setup)

	return ''.join(mother_setup)

def get_canon_father_setup(character, chained_child_fathers):
	if character["is_female"]:
		return ''
	
	father_setup = []

	for child_father in chained_child_fathers:
		if child_father == character["id"]:
			father_setup.append(f"\ncreate_story = story_agot_cc_{character['id'].lower()}")
		else:
			father_setup.append(textwrap.dedent(f"""
				agot_cc_get_canon_child_scope_effect = {{ FLAG = is_{child_father.lower()} SCOPE = father_{child_father.lower()} }}
				if = {{
					limit = {{ scope:father_{child_father.lower()} ?= {{ is_alive = yes }} }}
					scope:father_{child_father.lower()} = {{
						agot_cc_setup_real_father_effect = {{
							FATHER = scope:father_{child_father.lower()}
							REAL_FATHER = scope:child
							REAL_FATHER_FLAG = is_{character["id"].lower()}
							REAL_FATHER_VAR = agot_cc_real_father_{character["id"].lower()}
						}}
					}}
				}}
			"""))

	return ''.join(father_setup)